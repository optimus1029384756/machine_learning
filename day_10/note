confusion matrix를 이용한 것과 시각화를 할 때 어려운 코드를 이용한 것 빼고는 딱히 달라진 것이 없음

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
이 코드를 통해 데이터를 일정 수치 구간에 맞게 조정해주었다.

분류를 하고난 뒤에 예측된 데이터를 평가하기 위해 confusion matrix라는 데이터 테이블을 이용하게 되는데, 
분류 작업에서 최종적인 값이 보통 1(true) 또는 0(false)의 형식으로 나타나게 된다. 그리고 실제 데이터 값과 이를 예측한 값을 비교하게 되면 총 4가지의 경우의 수가 나올 수 있게 된다.
(실제 값, 예측값)의 형태의 순서쌍이 있을 때
1. True Positive(TP): 실제 값이 참(1)이고 예측 값도 참(1)인 경우
2. False Possitive(FP): 실제 값이 거짓(0)이지만 예측 값이 참(1)인 경우
3. False Negative(FN): 실제 값이 참(1)이지만 예측 값이 거짓(0)인 경우
4. True Negative(TN): 실제 값이 거짓(0)이고 예측 값이 거짓(0)인 경우
위와 같이 총 4가지의 경우의 수가 나타나게 되는데
보통 2X2의 행렬이 나와서 행렬의 (1,1)엔 TP,(1,2)엔 FN, (2,1)엔 FP, (2,2)엔 TN이 할당된다.
이러한 행렬을 통해 모델의 정확도를 평가한다고 한다.
