선형적인 데이터를 이용해 예측하기 위해 선을 그었을 때 데이터와 선의 관계가 잘 나타나게 된다면 선형회귀를 이용하면 되겠지만, 그러지 않고 데이터가 비선형적으로 나타날 경우에는 다항식 회귀를 이용하는게 더 용이하다
참고 문헌: https://m.blog.naver.com/samsjang/221006905415
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree = 4)
X_poly = poly_reg.fit_transform(X)
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly,y)

다항식 회귀 모듈을 불러온 다음에 선형회귀 때 처럼 클래스를 호출하고 다항식 회귀는 차수를 정해주어야 하는데 차수를 깊게 정할 수록 데이터의 분포에 맞게 학습된다. 
단순 선형회귀에서는 차수가 1이라서 아무런 전처리 과정 없이 기본적인 데이터 X를 사용해도 되지만 다항식 회귀는 차수가 2이상 이어서 인풋 데이터도 차수에 맞게 조절 해주어야 한다.
그래서 .fit_transform(X)을 이용해 입력 데이터 배열 X를 다항식 회귀에 입력할 때의 데이터 형식에 맞게 변형해준다.
나머지 코드는 선형회귀와 비슷하다.
이 코드에서는 X_poly가 다항식 회귀에 맞게 변형시킨 데이터 이므로 이를 출력 시켜보면 앞에서 정한 차수에 맞춰 데이터가 곱해져 있다.

ex)차수가 2이면 1,10,100과 같은 식으로 되어있음
다항식 회귀의 식은 y= b0+b1*x1+b2*x2^2+....와 같은 식으로 한가지 변수에 대해 곱하는 식으로 식을 만들기 때문에 위의 예시 같은 상황이 나타난다.

lin_reg.predict([[6.5]])
여기서 [[6.5]]로 되어 있는 이유는 선형회귀는 x와 y, 즉 2D로 이루어져 있으므로 [[6.5]]]로 하여 데이터도 차원 수를 맞춰줘야 한다.

다항식 회귀를 사용하여 특정 값을 예측할 때도 앞에서 말했듯이 값을 변형 해주어야 한다.
lin_reg_2.predict(poly_reg.fit_transform([[6.5]]))
